package com.app.pki_backend.configuration;

import com.app.pki_backend.entity.certificates.Certificate;
import com.app.pki_backend.service.interfaces.CertificateService;
import com.app.pki_backend.service.interfaces.MasterKeyService;
import com.app.pki_backend.service.interfaces.PrivateKeyService;
import com.app.pki_backend.util.PEMConverter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.io.FileOutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;

/**
 * –£–ü–†–û–©–ï–ù–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTPS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
 * –°–æ–∑–¥–∞–µ—Ç keystore –î–û –∑–∞–ø—É—Å–∫–∞ Tomcat
 */
@Component
@Order(1) // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ DataInitializer
public class HttpsInitializer implements CommandLineRunner {

    @Autowired
    private CertificateService certificateService;

    @Autowired
    private PrivateKeyService privateKeyService;

    @Autowired
    private MasterKeyService masterKeyService;

    @Autowired
    private PEMConverter pemConverter;

    @Value("${server.ssl.key-store:classpath:server-keystore.p12}")
    private String keystorePath;

    @Value("${server.ssl.key-store-password:changeit}")
    private String keystorePassword;

    @Override
    public void run(String... args) throws Exception {
        // –ò–∑–≤–ª–µ—á—å –ø—É—Ç—å –±–µ–∑ classpath:
        String actualPath = keystorePath.replace("classpath:", "src/main/resources/");

        if (Files.exists(Paths.get(actualPath))) {
            System.out.println("‚ÑπÔ∏è HTTPS keystore already exists: " + actualPath);
            return;
        }

        System.out.println("üîê Generating HTTPS server certificate...");

        try {
            // –ù–∞–π—Ç–∏ Root CA –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            Certificate rootCA = certificateService.findAll().stream()
                    .filter(c -> c.getType().name().equals("ROOT_CA"))
                    .filter(c -> c.getStatus().name().equals("ACTIVE"))
                    .findFirst()
                    .orElseThrow(() -> new IllegalStateException("No active Root CA found for HTTPS"));

            // –°–æ–∑–¥–∞—Ç—å server —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            Certificate serverCert = certificateService.issueServerCertificate("localhost", rootCA);

            // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
            SecretKey masterKey = masterKeyService.getCurrentMasterKey();
            PrivateKey privateKey = privateKeyService.retrievePrivateKey(serverCert, masterKey);

            // –ü–∞—Ä—Å–∏—Ç—å X509 —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            X509Certificate x509Cert = pemConverter.parseCertificate(serverCert.getCertificateData());

            // –°–æ–∑–¥–∞—Ç—å keystore
            KeyStore keyStore = KeyStore.getInstance("PKCS12");
            keyStore.load(null, null);
            keyStore.setKeyEntry(
                    "server",
                    privateKey,
                    keystorePassword.toCharArray(),
                    new java.security.cert.Certificate[]{x509Cert}
            );

            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å keystore
            try (FileOutputStream fos = new FileOutputStream(actualPath)) {
                keyStore.store(fos, keystorePassword.toCharArray());
            }

            System.out.println("‚úÖ HTTPS keystore created: " + actualPath);
            System.out.println("üîí Server will be available on: https://localhost:8443");

        } catch (Exception e) {
            System.err.println("‚ùå Failed to create HTTPS keystore: " + e.getMessage());
            System.err.println("‚ö†Ô∏è  Server will start without HTTPS");
            e.printStackTrace();
        }
    }
}
