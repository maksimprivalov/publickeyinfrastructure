package com.app.pki_backend.service.implementations;

import com.app.pki_backend.entity.certificates.Certificate;
import com.app.pki_backend.entity.certificates.CertificateStatus;
import com.app.pki_backend.entity.certificates.CertificateType;
import com.app.pki_backend.repository.CertificateRepository;
import com.app.pki_backend.util.PEMConverter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.security.PublicKey;
import java.security.cert.X509Certificate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏ —Ü–µ–ø–æ—á–µ–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
 */
@Service
public class CertificateChainValidationService {

    @Autowired
    private CertificateRepository certificateRepository;

    @Autowired
    private PEMConverter pemConverter;

    /**
     * –ì–õ–ê–í–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å issuer –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
     */
    public void validateIssuerBeforeSigning(Certificate issuer,
                                            LocalDateTime newCertNotBefore,
                                            LocalDateTime newCertNotAfter) {

        System.out.println("üîç Validating issuer certificate ID=" + issuer.getId());

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ issuer —è–≤–ª—è–µ—Ç—Å—è CA
        if (issuer.getType() == CertificateType.END_ENTITY) {
            throw new IllegalStateException(
                    "End-Entity certificate " + issuer.getId() + " cannot issue other certificates. " +
                            "Only ROOT_CA and INTERMEDIATE_CA can be used as issuers."
            );
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ issuer
        if (issuer.getStatus() == CertificateStatus.REVOKED) {
            throw new IllegalStateException(
                    "Cannot use revoked certificate " + issuer.getId() + " as issuer"
            );
        }

        if (issuer.getStatus() == CertificateStatus.EXPIRED) {
            throw new IllegalStateException(
                    "Cannot use expired certificate " + issuer.getId() + " as issuer"
            );
        }

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è issuer
        LocalDateTime now = LocalDateTime.now();
        if (now.isBefore(issuer.getValidFrom()) || now.isAfter(issuer.getValidTo())) {
            throw new IllegalStateException(
                    "Issuer certificate " + issuer.getId() + " is not currently valid. " +
                            "Valid from " + issuer.getValidFrom() + " to " + issuer.getValidTo()
            );
        }

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ issuer
        if (newCertNotBefore.isBefore(issuer.getValidFrom())) {
            throw new IllegalArgumentException(
                    "New certificate cannot start (" + newCertNotBefore +
                            ") before issuer validity (" + issuer.getValidFrom() + ")"
            );
        }

        if (newCertNotAfter.isAfter(issuer.getValidTo())) {
            throw new IllegalArgumentException(
                    "New certificate cannot expire (" + newCertNotAfter +
                            ") after issuer expiry (" + issuer.getValidTo() + ")"
            );
        }

        // 5. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏ –¥–æ Root
        List<Certificate> chain = buildChainToRoot(issuer);
        validateChain(chain);

        System.out.println("‚úÖ Issuer validation passed. Chain length: " + chain.size());
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ü–µ–ø–æ—á–∫—É –æ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–æ Root CA
     */
    public List<Certificate> buildChainToRoot(Certificate certificate) {
        List<Certificate> chain = new ArrayList<>();
        Certificate current = certificate;
        int depth = 0;
        int maxDepth = 10; // –∑–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–æ–≤

        while (current != null && depth < maxDepth) {
            chain.add(current);

            // –ï—Å–ª–∏ —ç—Ç–æ Root (—Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
            if (current.getIssuerCertificate() == null) {
                break;
            }

            // –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
            Certificate parent = current.getIssuerCertificate();
            if (chain.contains(parent)) {
                throw new IllegalStateException(
                        "Circular reference detected in certificate chain at ID=" + parent.getId()
                );
            }

            current = parent;
            depth++;
        }

        if (depth >= maxDepth) {
            throw new IllegalStateException("Certificate chain too deep (> " + maxDepth + ")");
        }

        return chain;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
     */
    private void validateChain(List<Certificate> chain) {
        if (chain.isEmpty()) {
            throw new IllegalStateException("Empty certificate chain");
        }

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ —Ü–µ–ø–æ—á–∫–µ - Root CA
        Certificate root = chain.get(chain.size() - 1);
        if (root.getIssuerCertificate() != null) {
            throw new IllegalStateException(
                    "Chain does not end with Root CA. Last cert ID=" + root.getId()
            );
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ —Ü–µ–ø–æ—á–∫–µ
        for (int i = 0; i < chain.size(); i++) {
            Certificate cert = chain.get(i);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            if (cert.getStatus() == CertificateStatus.REVOKED) {
                throw new IllegalStateException(
                        "Certificate " + cert.getId() + " in chain is REVOKED"
                );
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
            LocalDateTime now = LocalDateTime.now();
            if (now.isBefore(cert.getValidFrom()) || now.isAfter(cert.getValidTo())) {
                throw new IllegalStateException(
                        "Certificate " + cert.getId() + " in chain is not currently valid"
                );
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (–∫—Ä–æ–º–µ Root)
            if (i < chain.size() - 1) {
                Certificate parent = chain.get(i + 1);
                validateSignature(cert, parent);
            } else {
                // Root - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∏
                validateSelfSignature(cert);
            }
        }

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ PathLength constraints
        validatePathLengthConstraints(chain);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
     */
    private void validateSignature(Certificate cert, Certificate issuer) {
        try {
            X509Certificate x509Cert = pemConverter.parseCertificate(cert.getCertificateData());
            X509Certificate x509Issuer = pemConverter.parseCertificate(issuer.getCertificateData());

            PublicKey issuerPublicKey = x509Issuer.getPublicKey();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
            x509Cert.verify(issuerPublicKey);

            System.out.println("‚úì Signature valid: cert " + cert.getId() + " signed by " + issuer.getId());

        } catch (Exception e) {
            throw new IllegalStateException(
                    "Invalid signature for certificate " + cert.getId() +
                            " (issuer=" + issuer.getId() + "): " + e.getMessage(),
                    e
            );
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∏ Root —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
     */
    private void validateSelfSignature(Certificate rootCert) {
        try {
            X509Certificate x509Cert = pemConverter.parseCertificate(rootCert.getCertificateData());
            PublicKey publicKey = x509Cert.getPublicKey();

            // Root –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω
            x509Cert.verify(publicKey);

            System.out.println("‚úì Self-signature valid for Root CA " + rootCert.getId());

        } catch (Exception e) {
            throw new IllegalStateException(
                    "Invalid self-signature for Root CA " + rootCert.getId() + ": " + e.getMessage(),
                    e
            );
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ PathLength constraints
     */
    private void validatePathLengthConstraints(List<Certificate> chain) {
        // –ò–¥–µ–º –æ—Ç Root –≤–Ω–∏–∑
        for (int i = chain.size() - 1; i >= 0; i--) {
            Certificate cert = chain.get(i);

            if (!cert.getType().equals(CertificateType.INTERMEDIATE_CA)) {
                continue; // End-entity —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –∏–º–µ—é—Ç PathLength
            }

            try {
                X509Certificate x509Cert = pemConverter.parseCertificate(cert.getCertificateData());
                int pathLength = x509Cert.getBasicConstraints();

                if (pathLength == -1) {
                    throw new IllegalStateException(
                            "CA certificate " + cert.getId() + " has no BasicConstraints"
                    );
                }

                // –°–∫–æ–ª—å–∫–æ CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –Ω–∏–∂–µ —ç—Ç–æ–≥–æ?
                int casBelowCount = 0;
                for (int j = i - 1; j >= 0; j--) {
                    if (chain.get(j).getType().equals(CertificateType.INTERMEDIATE_CA)) {
                        casBelowCount++;
                    }
                }

                // PathLength –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –Ω–∏–∂–µ
                if (pathLength < casBelowCount && pathLength != Integer.MAX_VALUE) {
                    throw new IllegalStateException(
                            "PathLength constraint violated for certificate " + cert.getId() +
                                    ". Allowed: " + pathLength + ", actual: " + casBelowCount
                    );
                }

                System.out.println("‚úì PathLength OK for cert " + cert.getId() +
                        ": allowed=" + pathLength + ", below=" + casBelowCount);

            } catch (IllegalStateException e) {
                throw e;
            } catch (Exception e) {
                throw new IllegalStateException(
                        "Error checking PathLength for certificate " + cert.getId(), e
                );
            }
        }
    }

    /**
     * –í—ã—á–∏—Å–ª–∏—Ç—å –≥–ª—É–±–∏–Ω—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –æ—Ç Root
     */
    public int calculateDepthFromRoot(Certificate certificate) {
        List<Certificate> chain = buildChainToRoot(certificate);
        return chain.size() - 1; // Root –∏–º–µ–µ—Ç depth=0
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç –ª–∏ –¥–∞–Ω–Ω—ã–π CA –≤—ã–ø—É—Å—Ç–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω Intermediate CA
     */
    public boolean canIssueIntermediateCA(Certificate issuer) {
        try {
            X509Certificate x509Cert = pemConverter.parseCertificate(issuer.getCertificateData());
            int pathLength = x509Cert.getBasicConstraints();

            if (pathLength == -1 || !issuer.getType().equals(CertificateType.INTERMEDIATE_CA)) {
                return false; // –ù–µ CA –∏–ª–∏ –Ω–µ—Ç BasicConstraints
            }

            // –ï—Å–ª–∏ pathLength = 0, –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø—É—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏–µ CA
            if (pathLength == 0) {
                return false;
            }

            // –ï—Å–ª–∏ pathLength > 0 –∏–ª–∏ Integer.MAX_VALUE, –º–æ–∂–µ—Ç –≤—ã–ø—É—Å–∫–∞—Ç—å
            return true;

        } catch (Exception e) {
            return false;
        }
    }
}
