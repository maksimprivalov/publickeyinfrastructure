import * as asn1js from 'asn1js'
import * as pkijs from 'pkijs'
import { toBase64, toPem } from '../utils/pemUtils'

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSR (SHA256WithRSA)
 * –ò–¢–û–ì–û–í–ê–Ø –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
 */
export async function generateCSR({
	commonName,
	organization,
	email,
}: {
	commonName: string
	organization: string
	email?: string | null
}) {
	console.log('\nüîç ========== CSR GENERATION START ==========')
	console.log('üìù Input parameters:')
	console.log('   commonName:', commonName)
	console.log('   organization:', organization)
	console.log('   email:', email || '(not provided)')

	// ‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–∞
	const safeCommonName = (commonName || '').trim()
	const safeOrganization = (organization || '').trim()
	const safeEmail = (email || '').trim()

	if (!safeCommonName)
		throw new Error('Common Name (CN) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')
	if (!safeOrganization)
		throw new Error('Organization (O) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')

	try {
		// 1) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
		console.log('\nüîë Step 1: Generating RSA key pair (2048 bit)...')
		const algorithm: RsaHashedKeyGenParams = {
			name: 'RSASSA-PKCS1-v1_5',
			modulusLength: 2048,
			publicExponent: new Uint8Array([1, 0, 1]), // 65537
			hash: { name: 'SHA-256' },
		}

		const keyPair = await crypto.subtle.generateKey(algorithm, true, [
			'sign',
			'verify',
		])
		console.log('‚úÖ Key pair generated successfully')

		// 2) –û–±—ä–µ–∫—Ç CSR
		console.log('\nüì¶ Step 2: Creating CSR object...')
		const csr = new pkijs.CertificationRequest()

		// 3) –§–æ—Ä–º–∏—Ä—É–µ–º subject –ö–û–†–†–ï–ö–¢–ù–û (–∫–∞–∂–¥—ã–π –∞—Ç—Ä–∏–±—É—Ç ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π RDN)
		console.log('\nüìã Step 3: Building subject attributes...')
		const subject = new pkijs.RelativeDistinguishedNames({
			typesAndValues: [
				new pkijs.AttributeTypeAndValue({
					type: '2.5.4.3', // CN
					value: new asn1js.Utf8String({ value: safeCommonName }),
				}),
				new pkijs.AttributeTypeAndValue({
					type: '2.5.4.10', // O
					value: new asn1js.Utf8String({ value: safeOrganization }),
				}),
				new pkijs.AttributeTypeAndValue({
					type: '2.5.4.6', // C
					value: new asn1js.PrintableString({ value: 'RS' }),
				}),
				...(safeEmail !== ''
					? [
							new pkijs.AttributeTypeAndValue({
								type: '1.2.840.113549.1.9.1', // emailAddress
								value: new asn1js.IA5String({ value: safeEmail }),
							}),
					  ]
					: []),
			],
		})

		// –í–ê–ñ–ù–û: –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≤–µ—Å—å RDNSequence —Ü–µ–ª–∏–∫–æ–º
		csr.subject = subject

		console.log(
			'‚úÖ Subject built with',
			csr.subject.typesAndValues.length,
			'attributes (separate RDNs)'
		)

		// 4) –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
		console.log('\nüîë Step 4: Importing public key...')
		await csr.subjectPublicKeyInfo.importKey(keyPair.publicKey)
		console.log('‚úÖ Public key imported')

		// 5) –ü–æ–¥–ø–∏—Å—å CSR
		console.log(
			'\n‚úçÔ∏è Step 5: Signing CSR with private key (SHA-256 / RSASSA-PKCS1-v1_5)...'
		)
		await csr.sign(keyPair.privateKey, 'SHA-256')
		console.log('‚úÖ CSR signed successfully')

		// (–æ–ø—Ü.) –ª–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –æ—Ç–ª–æ–≤–∏—Ç—å –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–∞–π—Ç–æ–≤ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
		const localVerify = await csr.verify()
		if (!localVerify) {
			throw new Error(
				'–õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ CSR –Ω–µ –ø—Ä–æ—à–ª–∞ (csr.verify() === false). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–±–æ—Ä–∫—É subject/DER.'
			)
		}
		console.log('üîé Local verify OK')

		// 6) –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PEM (—Å—Ç—Ä–æ–≥–æ DER)
		console.log('\nüìÑ Step 6: Converting CSR to PEM format...')
		const csrBER = csr.toSchema().toBER(false) // DER
		const csrBase64 = toBase64(csrBER)
		const csrPEM = toPem(csrBase64, 'CERTIFICATE REQUEST')

		console.log('‚úÖ CSR PEM generated')
		console.log('üìè CSR PEM length:', csrPEM.length, 'characters')
		console.log('üìù CSR preview (first 100 chars):')
		console.log('   ', csrPEM.substring(0, 100) + '...')

		// 7) –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (PKCS#8)
		console.log('\nüîê Step 7: Exporting private key...')
		const privateKeyArrayBuffer = await crypto.subtle.exportKey(
			'pkcs8',
			keyPair.privateKey
		)
		const privateKeyBase64 = toBase64(privateKeyArrayBuffer)
		const privateKeyPEM = toPem(privateKeyBase64, 'PRIVATE KEY')

		console.log('‚úÖ Private key PEM generated')
		console.log(
			'üìè Private key PEM length:',
			privateKeyPEM.length,
			'characters'
		)
		console.log('\n========== CSR GENERATION SUCCESS ==========\n')

		return {
			pem: csrPEM, // –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
			csr: csrPEM, // —è–≤–Ω–æ–µ –∏–º—è
			privateKey: privateKeyPEM,
			keyPair,
		}
	} catch (error: any) {
		console.error('\n‚ùå ========== CSR GENERATION FAILED ==========')
		console.error('Error type:', error?.constructor?.name)
		console.error('Error message:', error?.message)
		console.error('Error stack:', error?.stack)
		console.error('==============================================\n')
		throw error
	}
}
